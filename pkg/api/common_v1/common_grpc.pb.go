// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.3
// source: common_v1/common.proto

package common_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommonV1Client is the client API for CommonV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommonV1Client interface {
	GetTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TimeResponse, error)
	GetDBTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TimeResponse, error)
	LongOperation(ctx context.Context, in *LongOperationRequest, opts ...grpc.CallOption) (CommonV1_LongOperationClient, error)
}

type commonV1Client struct {
	cc grpc.ClientConnInterface
}

func NewCommonV1Client(cc grpc.ClientConnInterface) CommonV1Client {
	return &commonV1Client{cc}
}

func (c *commonV1Client) GetTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TimeResponse, error) {
	out := new(TimeResponse)
	err := c.cc.Invoke(ctx, "/common_v1.CommonV1/GetTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonV1Client) GetDBTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TimeResponse, error) {
	out := new(TimeResponse)
	err := c.cc.Invoke(ctx, "/common_v1.CommonV1/GetDBTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonV1Client) LongOperation(ctx context.Context, in *LongOperationRequest, opts ...grpc.CallOption) (CommonV1_LongOperationClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommonV1_ServiceDesc.Streams[0], "/common_v1.CommonV1/LongOperation", opts...)
	if err != nil {
		return nil, err
	}
	x := &commonV1LongOperationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommonV1_LongOperationClient interface {
	Recv() (*LongOperationResponse, error)
	grpc.ClientStream
}

type commonV1LongOperationClient struct {
	grpc.ClientStream
}

func (x *commonV1LongOperationClient) Recv() (*LongOperationResponse, error) {
	m := new(LongOperationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommonV1Server is the server API for CommonV1 service.
// All implementations must embed UnimplementedCommonV1Server
// for forward compatibility
type CommonV1Server interface {
	GetTime(context.Context, *emptypb.Empty) (*TimeResponse, error)
	GetDBTime(context.Context, *emptypb.Empty) (*TimeResponse, error)
	LongOperation(*LongOperationRequest, CommonV1_LongOperationServer) error
	mustEmbedUnimplementedCommonV1Server()
}

// UnimplementedCommonV1Server must be embedded to have forward compatible implementations.
type UnimplementedCommonV1Server struct {
}

func (UnimplementedCommonV1Server) GetTime(context.Context, *emptypb.Empty) (*TimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTime not implemented")
}
func (UnimplementedCommonV1Server) GetDBTime(context.Context, *emptypb.Empty) (*TimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDBTime not implemented")
}
func (UnimplementedCommonV1Server) LongOperation(*LongOperationRequest, CommonV1_LongOperationServer) error {
	return status.Errorf(codes.Unimplemented, "method LongOperation not implemented")
}
func (UnimplementedCommonV1Server) mustEmbedUnimplementedCommonV1Server() {}

// UnsafeCommonV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommonV1Server will
// result in compilation errors.
type UnsafeCommonV1Server interface {
	mustEmbedUnimplementedCommonV1Server()
}

func RegisterCommonV1Server(s grpc.ServiceRegistrar, srv CommonV1Server) {
	s.RegisterService(&CommonV1_ServiceDesc, srv)
}

func _CommonV1_GetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonV1Server).GetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common_v1.CommonV1/GetTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonV1Server).GetTime(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonV1_GetDBTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonV1Server).GetDBTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common_v1.CommonV1/GetDBTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonV1Server).GetDBTime(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonV1_LongOperation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LongOperationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommonV1Server).LongOperation(m, &commonV1LongOperationServer{stream})
}

type CommonV1_LongOperationServer interface {
	Send(*LongOperationResponse) error
	grpc.ServerStream
}

type commonV1LongOperationServer struct {
	grpc.ServerStream
}

func (x *commonV1LongOperationServer) Send(m *LongOperationResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CommonV1_ServiceDesc is the grpc.ServiceDesc for CommonV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommonV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common_v1.CommonV1",
	HandlerType: (*CommonV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTime",
			Handler:    _CommonV1_GetTime_Handler,
		},
		{
			MethodName: "GetDBTime",
			Handler:    _CommonV1_GetDBTime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LongOperation",
			Handler:       _CommonV1_LongOperation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "common_v1/common.proto",
}
