// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: random_v1/random.proto

package random_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EmptyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyRequestMultiError, or
// nil if none found.
func (m *EmptyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyRequestMultiError(errors)
	}

	return nil
}

// EmptyRequestMultiError is an error wrapping multiple validation errors
// returned by EmptyRequest.ValidateAll() if the designated constraints aren't met.
type EmptyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyRequestMultiError) AllErrors() []error { return m }

// EmptyRequestValidationError is the validation error returned by
// EmptyRequest.Validate if the designated constraints aren't met.
type EmptyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyRequestValidationError) ErrorName() string { return "EmptyRequestValidationError" }

// Error satisfies the builtin error interface
func (e EmptyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyRequestValidationError{}

// Validate checks the field values on PongResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PongResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PongResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PongResponseMultiError, or
// nil if none found.
func (m *PongResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PongResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	if len(errors) > 0 {
		return PongResponseMultiError(errors)
	}

	return nil
}

// PongResponseMultiError is an error wrapping multiple validation errors
// returned by PongResponse.ValidateAll() if the designated constraints aren't met.
type PongResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PongResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PongResponseMultiError) AllErrors() []error { return m }

// PongResponseValidationError is the validation error returned by
// PongResponse.Validate if the designated constraints aren't met.
type PongResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PongResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PongResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PongResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PongResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PongResponseValidationError) ErrorName() string { return "PongResponseValidationError" }

// Error satisfies the builtin error interface
func (e PongResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPongResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PongResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PongResponseValidationError{}

// Validate checks the field values on TimeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeResponseMultiError, or
// nil if none found.
func (m *TimeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeResponseValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TimeResponseMultiError(errors)
	}

	return nil
}

// TimeResponseMultiError is an error wrapping multiple validation errors
// returned by TimeResponse.ValidateAll() if the designated constraints aren't met.
type TimeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeResponseMultiError) AllErrors() []error { return m }

// TimeResponseValidationError is the validation error returned by
// TimeResponse.Validate if the designated constraints aren't met.
type TimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeResponseValidationError) ErrorName() string { return "TimeResponseValidationError" }

// Error satisfies the builtin error interface
func (e TimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeResponseValidationError{}

// Validate checks the field values on NumberResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NumberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NumberResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NumberResponseMultiError,
// or nil if none found.
func (m *NumberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NumberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	if len(errors) > 0 {
		return NumberResponseMultiError(errors)
	}

	return nil
}

// NumberResponseMultiError is an error wrapping multiple validation errors
// returned by NumberResponse.ValidateAll() if the designated constraints
// aren't met.
type NumberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NumberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NumberResponseMultiError) AllErrors() []error { return m }

// NumberResponseValidationError is the validation error returned by
// NumberResponse.Validate if the designated constraints aren't met.
type NumberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumberResponseValidationError) ErrorName() string { return "NumberResponseValidationError" }

// Error satisfies the builtin error interface
func (e NumberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNumberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumberResponseValidationError{}

// Validate checks the field values on QuoteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuoteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuoteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuoteResponseMultiError, or
// nil if none found.
func (m *QuoteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QuoteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Quote

	if len(errors) > 0 {
		return QuoteResponseMultiError(errors)
	}

	return nil
}

// QuoteResponseMultiError is an error wrapping multiple validation errors
// returned by QuoteResponse.ValidateAll() if the designated constraints
// aren't met.
type QuoteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuoteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuoteResponseMultiError) AllErrors() []error { return m }

// QuoteResponseValidationError is the validation error returned by
// QuoteResponse.Validate if the designated constraints aren't met.
type QuoteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuoteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuoteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuoteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuoteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuoteResponseValidationError) ErrorName() string { return "QuoteResponseValidationError" }

// Error satisfies the builtin error interface
func (e QuoteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuoteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuoteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuoteResponseValidationError{}

// Validate checks the field values on LongOperationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LongOperationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LongOperationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LongOperationRequestMultiError, or nil if none found.
func (m *LongOperationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LongOperationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LongOperationRequestMultiError(errors)
	}

	return nil
}

// LongOperationRequestMultiError is an error wrapping multiple validation
// errors returned by LongOperationRequest.ValidateAll() if the designated
// constraints aren't met.
type LongOperationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LongOperationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LongOperationRequestMultiError) AllErrors() []error { return m }

// LongOperationRequestValidationError is the validation error returned by
// LongOperationRequest.Validate if the designated constraints aren't met.
type LongOperationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LongOperationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LongOperationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LongOperationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LongOperationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LongOperationRequestValidationError) ErrorName() string {
	return "LongOperationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LongOperationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLongOperationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LongOperationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LongOperationRequestValidationError{}

// Validate checks the field values on LongOperationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LongOperationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LongOperationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LongOperationResponseMultiError, or nil if none found.
func (m *LongOperationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LongOperationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for Progress

	// no validation rules for Result

	if len(errors) > 0 {
		return LongOperationResponseMultiError(errors)
	}

	return nil
}

// LongOperationResponseMultiError is an error wrapping multiple validation
// errors returned by LongOperationResponse.ValidateAll() if the designated
// constraints aren't met.
type LongOperationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LongOperationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LongOperationResponseMultiError) AllErrors() []error { return m }

// LongOperationResponseValidationError is the validation error returned by
// LongOperationResponse.Validate if the designated constraints aren't met.
type LongOperationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LongOperationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LongOperationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LongOperationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LongOperationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LongOperationResponseValidationError) ErrorName() string {
	return "LongOperationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LongOperationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLongOperationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LongOperationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LongOperationResponseValidationError{}

// Validate checks the field values on TxtRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TxtRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TxtRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TxtRequestMultiError, or
// nil if none found.
func (m *TxtRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TxtRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetText()); l < 1 || l > 50 {
		err := TxtRequestValidationError{
			field:  "Text",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TxtRequestMultiError(errors)
	}

	return nil
}

// TxtRequestMultiError is an error wrapping multiple validation errors
// returned by TxtRequest.ValidateAll() if the designated constraints aren't met.
type TxtRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TxtRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TxtRequestMultiError) AllErrors() []error { return m }

// TxtRequestValidationError is the validation error returned by
// TxtRequest.Validate if the designated constraints aren't met.
type TxtRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxtRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxtRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxtRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxtRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxtRequestValidationError) ErrorName() string { return "TxtRequestValidationError" }

// Error satisfies the builtin error interface
func (e TxtRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxtRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxtRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxtRequestValidationError{}

// Validate checks the field values on TxtResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TxtResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TxtResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TxtResponseMultiError, or
// nil if none found.
func (m *TxtResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TxtResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	if len(errors) > 0 {
		return TxtResponseMultiError(errors)
	}

	return nil
}

// TxtResponseMultiError is an error wrapping multiple validation errors
// returned by TxtResponse.ValidateAll() if the designated constraints aren't met.
type TxtResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TxtResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TxtResponseMultiError) AllErrors() []error { return m }

// TxtResponseValidationError is the validation error returned by
// TxtResponse.Validate if the designated constraints aren't met.
type TxtResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxtResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxtResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxtResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxtResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxtResponseValidationError) ErrorName() string { return "TxtResponseValidationError" }

// Error satisfies the builtin error interface
func (e TxtResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxtResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxtResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxtResponseValidationError{}

// Validate checks the field values on Parent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Parent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Parent with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ParentMultiError, or nil if none found.
func (m *Parent) ValidateAll() error {
	return m.validate(true)
}

func (m *Parent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ParentMultiError(errors)
	}

	return nil
}

// ParentMultiError is an error wrapping multiple validation errors returned by
// Parent.ValidateAll() if the designated constraints aren't met.
type ParentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParentMultiError) AllErrors() []error { return m }

// ParentValidationError is the validation error returned by Parent.Validate if
// the designated constraints aren't met.
type ParentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParentValidationError) ErrorName() string { return "ParentValidationError" }

// Error satisfies the builtin error interface
func (e ParentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParentValidationError{}

// Validate checks the field values on Person with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Person) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Person with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PersonMultiError, or nil if none found.
func (m *Person) ValidateAll() error {
	return m.validate(true)
}

func (m *Person) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Age

	if all {
		switch v := interface{}(m.GetParent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PersonValidationError{
					field:  "Parent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PersonValidationError{
					field:  "Parent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PersonValidationError{
				field:  "Parent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PersonMultiError(errors)
	}

	return nil
}

// PersonMultiError is an error wrapping multiple validation errors returned by
// Person.ValidateAll() if the designated constraints aren't met.
type PersonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PersonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PersonMultiError) AllErrors() []error { return m }

// PersonValidationError is the validation error returned by Person.Validate if
// the designated constraints aren't met.
type PersonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersonValidationError) ErrorName() string { return "PersonValidationError" }

// Error satisfies the builtin error interface
func (e PersonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerson.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersonValidationError{}
